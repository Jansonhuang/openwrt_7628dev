--- a/sound/soc/mtk/Makefile
+++ b/sound/soc/mtk/Makefile
@@ -16,6 +16,7 @@ KBUILD_CFLAGS += -DCONFIG_GDMA_EVERYBODY
 KBUILD_CFLAGS += -DCONFIG_SND_MT76XX_SOC
 KBUILD_CFLAGS += -DCONFIG_I2S_WM8960
 #KBUILD_CFLAGS += -DCONFIG_I2S_MCLK_12P288MHZ
+KBUILD_CFLAGS += -DCONFIG_I2S_IN_MCLK
 KBUILD_CFLAGS += -DCONFIG_I2S_MCLK_12MHZ
 KBUILD_CFLAGS += -DCONFIG_GDMA_EVERYBODY
 KBUILD_CFLAGS += -DSURFBOARDINT_DMA=15
--- a/sound/soc/mtk/i2s_ctrl.c
+++ b/sound/soc/mtk/i2s_ctrl.c
@@ -97,7 +97,7 @@ static int i2s_ioctl(struct inode *inode
 static int i2s_mmap(struct file *file, struct vm_area_struct *vma);
 static int i2s_open(struct inode *inode, struct file *file);
 static int i2s_release(struct inode *inode, struct file *file);
-int i2s_mmap_alloc(unsigned long size);
+int i2s_mmap_alloc(unsigned long size,int dir);
 int i2s_mmap_remap(struct vm_area_struct *vma, unsigned long size);
 
 /* global varable definitions */
@@ -377,12 +377,17 @@ static int i2s_release(struct inode *ino
 	ptri2s_config = filp->private_data;
 	if(ptri2s_config==NULL)
 		goto EXIT;
-#ifdef CONFIG_I2S_MMAP	
-	i2s_mem_unmap(ptri2s_config);
-#else
-	i2s_txbuf_free(ptri2s_config);
-	i2s_rxbuf_free(ptri2s_config);
-#endif	
+
+	if(pi2s_config->is_tx_mmap)
+		i2s_mem_unmap(ptri2s_config,STREAM_PLAYBACK);
+	else
+		i2s_txbuf_free(ptri2s_config);
+
+	if(pi2s_config->is_rx_mmap)
+		i2s_mem_unmap(ptri2s_config,STREAM_CAPTURE);
+	else
+		i2s_rxbuf_free(ptri2s_config);
+	
 	/* free buffer */
 	i2s_txPagebuf_free(ptri2s_config);
 	i2s_rxPagebuf_free(ptri2s_config);	
@@ -391,27 +396,33 @@ EXIT:
 	return 0;
 }
 
-int i2s_mmap_alloc(unsigned long size)
+int i2s_mmap_alloc(unsigned long size,int dir)
 {
 	int i;
 	u32 page_size;
        	int first_index;
 
 	page_size = I2S_PAGE_SIZE;
-
+	if(STREAM_PLAYBACK == dir){
+		pi2s_config->mmap_index = 0;
+	}
+	else{
+		pi2s_config->mmap_index = MAX_I2S_PAGE;
+	}
+	
 	if ((pi2s_config->mmap_index == 0) || (pi2s_config->mmap_index == MAX_I2S_PAGE))
 	{
 		MSG("mmap_index=%d\n", pi2s_config->mmap_index);
 
 		first_index = pi2s_config->mmap_index;
-	pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index] = kmalloc(size, GFP_DMA);
-	i2s_mmap_addr[pi2s_config->mmap_index] = (dma_addr_t)dma_map_single(NULL, pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index], size, DMA_BIDIRECTIONAL);
+		pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index] = kmalloc(size, GFP_DMA);
+		i2s_mmap_addr[pi2s_config->mmap_index] = (dma_addr_t)dma_map_single(NULL, pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index], size, DMA_BIDIRECTIONAL);
 	
-	if( pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index] == NULL ) 
-	{
-		MSG("i2s_mmap failed\n");
-		return -1;
-	}
+		if( pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index] == NULL ) 
+		{
+			MSG("i2s_mmap failed\n");
+			return -1;
+		}
 	}
 	else
 	{
@@ -419,7 +430,7 @@ int i2s_mmap_alloc(unsigned long size)
 		return -1;	
 	}
 	
-	_printk("MMAP[%d]=0x%08X, i2s_mmap_addr[%d]=0x%08x\n",
+	MSG("MMAP[%d]=0x%08X, i2s_mmap_addr[%d]=0x%08x\n",
 		pi2s_config->mmap_index, (u32)pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index], 
                 pi2s_config->mmap_index, i2s_mmap_addr[pi2s_config->mmap_index]);
 	
@@ -431,7 +442,7 @@ int i2s_mmap_alloc(unsigned long size)
 		i2s_mmap_addr[pi2s_config->mmap_index] = i2s_mmap_addr[first_index] + i*page_size;
 		pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index] = pi2s_config->pMMAPBufPtr[first_index] + i*page_size;
 
-		_printk("MMAP[%d]=0x%08X, i2s_mmap_addr[%d]=0x%08x\n",pi2s_config->mmap_index, (u32)pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index], pi2s_config->mmap_index, i2s_mmap_addr[pi2s_config->mmap_index]);
+		MSG("MMAP[%d]=0x%08X, i2s_mmap_addr[%d]=0x%08x\n",pi2s_config->mmap_index, (u32)pi2s_config->pMMAPBufPtr[pi2s_config->mmap_index], pi2s_config->mmap_index, i2s_mmap_addr[pi2s_config->mmap_index]);
 	
 		/* Notice: The last mmap_index's value should be MAX_I2S_PAGE or MAX_I2S_PAGE*2 */
 		pi2s_config->mmap_index++;
@@ -443,10 +454,10 @@ int i2s_mmap_alloc(unsigned long size)
 int i2s_mmap_remap(struct vm_area_struct *vma, unsigned long size)
 {
 	int nRet;
-
 	if((pi2s_config->pMMAPBufPtr[0]!=NULL) && (pi2s_config->mmap_index == MAX_I2S_PAGE))
 	{
 		MSG("i2s_mmap_remap:0\n");
+		//move left 12bit, why?
 		nRet = remap_pfn_range(vma, vma->vm_start, virt_to_phys((void *)pi2s_config->pMMAPBufPtr[0]) >> PAGE_SHIFT,  size, vma->vm_page_prot);
 
 		if( nRet != 0 )
@@ -478,12 +489,14 @@ static int i2s_mmap(struct file *filp, s
 	_printk("page_size=%d, ksize=%lu\n", I2S_PAGE_SIZE, size);
 
 	if((pi2s_config->pMMAPBufPtr[0]==NULL)&&(pi2s_config->mmap_index!=0))
-		pi2s_config->mmap_index = 0;
-		
+		{
+			MSG(">>>>>>pi2s_config->mmap_index = 0\n");
+			pi2s_config->mmap_index = 0;
+		}
 	_printk("%s: vm_start=%08X,vm_end=%08X\n", __func__, (u32)vma->vm_start, (u32)vma->vm_end);
 		
 	/* Do memory allocate and dma sync */
-	i2s_mmap_alloc(size);
+	i2s_mmap_alloc(size,STREAM_PLAYBACK);
 
 	i2s_mmap_remap(vma, size);
 
@@ -491,28 +504,44 @@ static int i2s_mmap(struct file *filp, s
 	return 0;
 }
 
-int i2s_mem_unmap(i2s_config_type* ptri2s_config)
+int i2s_mem_unmap(i2s_config_type* ptri2s_config,int dir)
 {
 	u32 page_size;
 
 	page_size = I2S_PAGE_SIZE;
-
-	if(ptri2s_config->pMMAPBufPtr[0])
+	if(STREAM_PLAYBACK == dir){
+		if(ptri2s_config->pMMAPBufPtr[0]){
+			printk("ummap MMAP[0]=0x%08X\n", (u32)ptri2s_config->pMMAPBufPtr[0]);
+			dma_unmap_single(NULL, i2s_mmap_addr[0], MAX_I2S_PAGE*page_size, DMA_BIDIRECTIONAL);
+			kfree(ptri2s_config->pMMAPBufPtr[0]);
+			ptri2s_config->pMMAPBufPtr[0] = NULL;
+		}
+	}
+	else{
+		if(ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]){
+			printk("ummap MMAP[%d]=0x%08X\n", MAX_I2S_PAGE, (u32)ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]);
+			dma_unmap_single(NULL, i2s_mmap_addr[MAX_I2S_PAGE], MAX_I2S_PAGE*page_size, DMA_BIDIRECTIONAL);
+			kfree(ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]);
+			ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE] = NULL;
+		}
+	}
+#if 0
+	if(ptri2s_config->pMMAPBufPtr[0]&& (ptri2s_config->mmap_index != 0))
 	{	
-		_printk("ummap MMAP[0]=0x%08X\n", (u32)ptri2s_config->pMMAPBufPtr[0]);
+		printk("ummap MMAP[0]=0x%08X\n", (u32)ptri2s_config->pMMAPBufPtr[0]);
 		dma_unmap_single(NULL, i2s_mmap_addr[0], MAX_I2S_PAGE*page_size, DMA_BIDIRECTIONAL);
 		kfree(ptri2s_config->pMMAPBufPtr[0]);
 	}
 
-	if(ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE])
+	if(ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]&& (ptri2s_config->mmap_index != 0))
 	{
-		_printk("ummap MMAP[%d]=0x%08X\n", MAX_I2S_PAGE, (u32)ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]);
+		printk("ummap MMAP[%d]=0x%08X\n", MAX_I2S_PAGE, (u32)ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]);
 		dma_unmap_single(NULL, i2s_mmap_addr[MAX_I2S_PAGE], MAX_I2S_PAGE*page_size, DMA_BIDIRECTIONAL);
 		kfree(ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]);
 	}
 
 	ptri2s_config->mmap_index = 0;
-	
+#endif	
 	return 0;
 }
 
@@ -543,6 +572,9 @@ int i2s_param_init(i2s_config_type* ptri
 	ptri2s_config->micboost = 0;
 	ptri2s_config->micin = 0;
 
+	ptri2s_config->is_rx_mmap = 0;
+	ptri2s_config->is_tx_mmap = 0;
+
 	return 0;
 }
 
@@ -552,12 +584,12 @@ int i2s_txbuf_alloc(i2s_config_type* ptr
 
 	for( i = 0 ; i < MAX_I2S_PAGE ; i ++ )
         {
-#if defined(CONFIG_I2S_MMAP)
-		ptri2s_config->pMMAPTxBufPtr[i] = ptri2s_config->pMMAPBufPtr[i];
-#else
+			if(ptri2s_config->is_tx_mmap)
+				ptri2s_config->pMMAPTxBufPtr[i] = ptri2s_config->pMMAPBufPtr[i];
+			else{
                 if(ptri2s_config->pMMAPTxBufPtr[i]==NULL)
                 	ptri2s_config->pMMAPTxBufPtr[i] = kmalloc(I2S_PAGE_SIZE, GFP_KERNEL);
-#endif
+			}
 		memset(ptri2s_config->pMMAPTxBufPtr[i], 0, I2S_PAGE_SIZE);
 	}
 
@@ -570,12 +602,12 @@ int i2s_rxbuf_alloc(i2s_config_type* ptr
 
 	for( i = 0 ; i < MAX_I2S_PAGE ; i ++ )
         {
-#if defined(CONFIG_I2S_MMAP)
-        	ptri2s_config->pMMAPRxBufPtr[i] = ptri2s_config->pMMAPBufPtr[i+(ptri2s_config->mmap_index-MAX_I2S_PAGE)];
-#else
-                if(ptri2s_config->pMMAPRxBufPtr[i]==NULL)
-			ptri2s_config->pMMAPRxBufPtr[i] = kmalloc(I2S_PAGE_SIZE, GFP_KERNEL);
-#endif
+			if(ptri2s_config->is_rx_mmap)
+				ptri2s_config->pMMAPRxBufPtr[i] = ptri2s_config->pMMAPBufPtr[i+MAX_I2S_PAGE];
+			else{
+				if(ptri2s_config->pMMAPRxBufPtr[i]==NULL)
+					ptri2s_config->pMMAPRxBufPtr[i] = kmalloc(I2S_PAGE_SIZE, GFP_KERNEL);
+			}
 		memset(ptri2s_config->pMMAPRxBufPtr[i], 0, I2S_PAGE_SIZE);
         }
 
@@ -644,12 +676,12 @@ int i2s_txbuf_free(i2s_config_type* ptri
 	{
 		if(ptri2s_config->pMMAPTxBufPtr[i] != NULL)
 		{
-#if defined(CONFIG_I2S_MMAP)
-                        ptri2s_config->pMMAPTxBufPtr[i] = NULL;
-#else
-			kfree(ptri2s_config->pMMAPTxBufPtr[i]);
-			ptri2s_config->pMMAPTxBufPtr[i] = NULL;
-#endif
+			if(ptri2s_config->is_tx_mmap)
+				ptri2s_config->pMMAPTxBufPtr[i] = NULL;
+			else{
+				kfree(ptri2s_config->pMMAPTxBufPtr[i]);
+				ptri2s_config->pMMAPTxBufPtr[i] = NULL;
+			}
 		}
 	}
 	return 0;
@@ -663,12 +695,12 @@ int i2s_rxbuf_free(i2s_config_type* ptri
 	{
 		if(ptri2s_config->pMMAPRxBufPtr[i] != NULL)
 		{
-#if defined(CONFIG_I2S_MMAP)
-                        ptri2s_config->pMMAPRxBufPtr[i] = NULL;
-#else
-			kfree(ptri2s_config->pMMAPRxBufPtr[i]);
-			ptri2s_config->pMMAPRxBufPtr[i] = NULL;
-#endif
+			if(ptri2s_config->is_rx_mmap)
+				ptri2s_config->pMMAPRxBufPtr[i] = NULL;
+			else{
+				kfree(ptri2s_config->pMMAPRxBufPtr[i]);
+				ptri2s_config->pMMAPRxBufPtr[i] = NULL;
+			}
 		}
 	}
 	
@@ -1319,7 +1351,8 @@ int i2s_refclk_gpio_out_config(void)
 #endif
 #if defined(CONFIG_RALINK_MT7628)
 	data = i2s_inw(RALINK_SYSCTL_BASE+0x60);
-	data &= ~(0x1<<18);
+//	data &= ~(0x1<<18);
+	data |= 0x02;//set bit 0~1,GPIO_MODE->REFCLK 
 	i2s_outw(RALINK_SYSCTL_BASE+0x60, data);
 #endif
 
@@ -1364,12 +1397,16 @@ int i2s_refclk_gpio_in_config(void)
 #if defined (CONFIG_RALINK_MT7628)
 	/* To use external OSC, set REFCLK_GPIO ping as GPIO mode and set it as input direction */
 	data = i2s_inw(RALINK_SYSCTL_BASE+0x60);
-	data |= (0x1<<18);
+//	data |= (0x1<<18);
+	data &= 0xfc;//clean bit 0~1,GPIO_MODE->gpio
 	i2s_outw(RALINK_SYSCTL_BASE+0x60, data);
 
-	data = i2s_inw(RALINK_PIO_BASE+0x04);
-	data &= ~(0x1<<5); /* GPIO share ping 37*/
-	i2s_outw(RALINK_PIO_BASE+0x04, data);
+//	data = i2s_inw(RALINK_PIO_BASE+0x04);
+	data = i2s_inw(RALINK_PIO_BASE);
+//	data &= ~(0x1<<5); /* GPIO share ping 37*/
+	data &= ~(0x01 << 11);//clean bit 11,for gpio11 input
+//	i2s_outw(RALINK_PIO_BASE+0x04, data);
+	i2s_outw(RALINK_PIO_BASE, data);
 #endif
 
 	return 0;
@@ -1788,8 +1825,8 @@ int i2s_clock_disable(i2s_config_type* p
 
 	/* disable internal MCLK */
 #if defined(CONFIG_I2S_IN_MCLK)	
-	i2s_refclk_disable();
-	i2s_refclk_gpio_in_config();
+	//i2s_refclk_disable();
+	//i2s_refclk_gpio_in_config();
 #endif
 	return 0;
 }	
@@ -1984,7 +2021,7 @@ int i2s_tx_enable(i2s_config_type* ptri2
 	data = i2s_inw(I2S_I2SCFG);
 	data |= REGBIT(0x1, I2S_EN);
 	i2s_outw(I2S_I2SCFG, data);
-	
+	pi2s_config->bTxDMAEnable = 1;
 	MSG("i2s_tx_enable done\n");
 	return I2S_OK;
 }
@@ -2013,6 +2050,7 @@ int i2s_rx_enable(i2s_config_type* ptri2
 	data = i2s_inw(I2S_I2SCFG);
 	data |= REGBIT(0x1, I2S_EN);
 	i2s_outw(I2S_I2SCFG, data);
+	ptri2s_config->bRxDMAEnable = 1;
 	
 	MSG("i2s_rx_enable done\n");
 	return I2S_OK;
@@ -2037,6 +2075,7 @@ int i2s_tx_disable(i2s_config_type* ptri
 #endif	
 	if(ptri2s_config->bRxDMAEnable==0)
 	{
+		MSG("=====%s+++++:%d\n",__func__,ptri2s_config->bTxDMAEnable);
 		ptri2s_config->bTxDMAEnable = 0;
 		data &= ~REGBIT(0x1, I2S_DMA_EN);
                 data &= ~REGBIT(0x1, I2S_EN);
@@ -2075,49 +2114,51 @@ int i2s_rx_disable(i2s_config_type* ptri
 int i2s_dma_tx_transf_data(i2s_config_type* ptri2s_config, u32 dma_ch)
 {
 	int tx_r_idx;
- 
-	if ((pi2s_config->bALSAEnable==1) && (pi2s_config->bALSAMMAPEnable==1))
+
+	if((pi2s_config->bALSAEnable==1) && (pi2s_config->bALSAMMAPEnable==1)&&(pi2s_config->mmap_index <= MAX_I2S_PAGE))
 		tx_r_idx = (pi2s_config->tx_r_idx + ALSA_MMAP_IDX_SHIFT)%MAX_I2S_PAGE;
 	else
 		tx_r_idx = pi2s_config->tx_r_idx;
-
+	//MSG(">>>>>>  tx_r_idx:%d\n",tx_r_idx);
 	if(dma_ch==GDMA_I2S_TX0)
         {
-#if defined(CONFIG_I2S_MMAP)
-		dma_sync_single_for_device(NULL,  i2s_mmap_addr[tx_r_idx], I2S_PAGE_SIZE, DMA_TO_DEVICE);
+        	if(pi2s_config->is_tx_mmap){
+				dma_sync_single_for_device(NULL,  i2s_mmap_addr[tx_r_idx], I2S_PAGE_SIZE, DMA_TO_DEVICE);
 #if defined(ARM_ARCH)
-		GdmaI2sTx(i2s_mmap_addr[tx_r_idx], I2S_TX_FIFO_WREG_PHY, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+				GdmaI2sTx(i2s_mmap_addr[tx_r_idx], I2S_TX_FIFO_WREG_PHY, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #else
-                GdmaI2sTx((u32)(pi2s_config->pMMAPTxBufPtr[tx_r_idx]), I2S_TX_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+				GdmaI2sTx((u32)(pi2s_config->pMMAPTxBufPtr[tx_r_idx]), I2S_TX_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #endif
-#else
-                memcpy(pi2s_config->pPage0TxBuf8ptr,  pi2s_config->pMMAPTxBufPtr[tx_r_idx], I2S_PAGE_SIZE);
+			}
+			else{
+				memcpy(pi2s_config->pPage0TxBuf8ptr,  pi2s_config->pMMAPTxBufPtr[tx_r_idx], I2S_PAGE_SIZE);
 #if defined(ARM_ARCH)
-		GdmaI2sTx(i2s_txdma_addr0, I2S_TX_FIFO_WREG_PHY, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+				GdmaI2sTx(i2s_txdma_addr0, I2S_TX_FIFO_WREG_PHY, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #else
-                GdmaI2sTx((u32)(pi2s_config->pPage0TxBuf8ptr), I2S_TX_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
-#endif
+				GdmaI2sTx((u32)(pi2s_config->pPage0TxBuf8ptr), I2S_TX_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #endif
-                pi2s_config->dmach = GDMA_I2S_TX0;
-                pi2s_config->tx_r_idx = (pi2s_config->tx_r_idx+1)%MAX_I2S_PAGE;
+			}
+            pi2s_config->dmach = GDMA_I2S_TX0;
+			pi2s_config->tx_r_idx = (pi2s_config->tx_r_idx+1)%MAX_I2S_PAGE;
 	}
         else
         {
-#if defined(CONFIG_I2S_MMAP)
-		dma_sync_single_for_device(NULL,  i2s_mmap_addr[tx_r_idx], I2S_PAGE_SIZE, DMA_TO_DEVICE);
+        	if(pi2s_config->is_tx_mmap){
+				dma_sync_single_for_device(NULL,  i2s_mmap_addr[tx_r_idx], I2S_PAGE_SIZE, DMA_TO_DEVICE);
 #if defined(ARM_ARCH)
-		GdmaI2sTx(i2s_mmap_addr[tx_r_idx], I2S_TX_FIFO_WREG_PHY, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+				GdmaI2sTx(i2s_mmap_addr[tx_r_idx], I2S_TX_FIFO_WREG_PHY, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #else
-                GdmaI2sTx((u32)(pi2s_config->pMMAPTxBufPtr[tx_r_idx]), I2S_TX_FIFO_WREG, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+				GdmaI2sTx((u32)(pi2s_config->pMMAPTxBufPtr[tx_r_idx]), I2S_TX_FIFO_WREG, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #endif
-#else
-                memcpy(pi2s_config->pPage1TxBuf8ptr,  pi2s_config->pMMAPTxBufPtr[tx_r_idx], I2S_PAGE_SIZE);
+			}
+			else{
+				memcpy(pi2s_config->pPage1TxBuf8ptr,  pi2s_config->pMMAPTxBufPtr[tx_r_idx], I2S_PAGE_SIZE);
 #if defined(ARM_ARCH)
-		GdmaI2sTx(i2s_txdma_addr1, I2S_TX_FIFO_WREG_PHY, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+				GdmaI2sTx(i2s_txdma_addr1, I2S_TX_FIFO_WREG_PHY, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #else
-                GdmaI2sTx((u32)(pi2s_config->pPage1TxBuf8ptr), I2S_TX_FIFO_WREG, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
-#endif
+				GdmaI2sTx((u32)(pi2s_config->pPage1TxBuf8ptr), I2S_TX_FIFO_WREG, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #endif
+			}
                 pi2s_config->dmach = GDMA_I2S_TX1;
                 pi2s_config->tx_r_idx = (pi2s_config->tx_r_idx+1)%MAX_I2S_PAGE;
 	}
@@ -2137,7 +2178,8 @@ int i2s_dma_tx_transf_zero(i2s_config_ty
 #if defined(ARM_ARCH)
 		GdmaI2sTx(i2s_txdma_addr0, I2S_TX_FIFO_WREG_PHY, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #else
-                GdmaI2sTx((u32)pi2s_config->pPage0TxBuf8ptr, I2S_TX_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
+			MSG("+++++++%s+++++\n",__func__);
+            GdmaI2sTx((u32)pi2s_config->pPage0TxBuf8ptr, I2S_TX_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #endif
         }
         else
@@ -2162,45 +2204,45 @@ int i2s_dma_rx_transf_data(i2s_config_ty
 		rx_w_idx = (pi2s_config->rx_w_idx+ALSA_MMAP_IDX_SHIFT)%MAX_I2S_PAGE;
 	else
 		rx_w_idx = (pi2s_config->rx_w_idx)%MAX_I2S_PAGE;
-
+	//MSG("=========== rx_w_idx:%d\n",rx_w_idx+MAX_I2S_PAGE);
 	if(dma_ch==GDMA_I2S_RX0)
         {
-                
-#ifdef CONFIG_I2S_MMAP
-                dma_sync_single_for_device(NULL,  i2s_mmap_addr[rx_w_idx+(pi2s_config->mmap_index-MAX_I2S_PAGE)], I2S_PAGE_SIZE, DMA_FROM_DEVICE);
+             if(ptri2s_config->is_rx_mmap){
+				  dma_sync_single_for_device(NULL,	i2s_mmap_addr[rx_w_idx+MAX_I2S_PAGE], I2S_PAGE_SIZE, DMA_FROM_DEVICE);
 #if defined(ARM_ARCH)
-		GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, (u32)i2s_mmap_addr[rx_w_idx+(pi2s_config->mmap_index-MAX_I2S_PAGE)], 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				 GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, (u32)i2s_mmap_addr[rx_w_idx+MAX_I2S_PAGE], 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #else
-                GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pMMAPRxBufPtr[rx_w_idx]), 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				 GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pMMAPRxBufPtr[rx_w_idx]), 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #endif
-#else
-                memcpy(pi2s_config->pMMAPRxBufPtr[rx_w_idx], pi2s_config->pPage0RxBuf8ptr, I2S_PAGE_SIZE);
+			 }
+			 else{
+				memcpy(pi2s_config->pMMAPRxBufPtr[rx_w_idx], pi2s_config->pPage0RxBuf8ptr, I2S_PAGE_SIZE);
 #if defined(ARM_ARCH)
-		GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, i2s_rxdma_addr0, 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, i2s_rxdma_addr0, 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #else
-                GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pPage0RxBuf8ptr), 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pPage0RxBuf8ptr), 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #endif
-#endif
-                pi2s_config->dmach = GDMA_I2S_RX0;
+			 }
+             pi2s_config->dmach = GDMA_I2S_RX0;
         }
 	else
         {
-                
-#ifdef CONFIG_I2S_MMAP
-                dma_sync_single_for_device(NULL,  i2s_mmap_addr[rx_w_idx+(pi2s_config->mmap_index-MAX_I2S_PAGE)], I2S_PAGE_SIZE, DMA_FROM_DEVICE);
+             if(ptri2s_config->is_rx_mmap){
+				dma_sync_single_for_device(NULL,  i2s_mmap_addr[rx_w_idx+ MAX_I2S_PAGE], I2S_PAGE_SIZE, DMA_FROM_DEVICE);
 #if defined(ARM_ARCH)
-		GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, (u32)i2s_mmap_addr[rx_w_idx+(pi2s_config->mmap_index-MAX_I2S_PAGE)], 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, (u32)i2s_mmap_addr[rx_w_idx+MAX_I2S_PAGE], 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #else
-                GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pMMAPRxBufPtr[rx_w_idx]), 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pMMAPRxBufPtr[rx_w_idx]), 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #endif
-#else
-                memcpy(pi2s_config->pMMAPRxBufPtr[rx_w_idx], pi2s_config->pPage1RxBuf8ptr, I2S_PAGE_SIZE);
+			 }
+			 else{
+				memcpy(pi2s_config->pMMAPRxBufPtr[rx_w_idx], pi2s_config->pPage1RxBuf8ptr, I2S_PAGE_SIZE);
 #if defined(ARM_ARCH)
-		GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, i2s_rxdma_addr1, 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+				GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, i2s_rxdma_addr1, 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #else
-                GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pPage1RxBuf8ptr), 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
-#endif
+				GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)(pi2s_config->pPage1RxBuf8ptr), 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #endif
+			 }
                 pi2s_config->dmach = GDMA_I2S_RX1;
 
         }
@@ -2220,7 +2262,7 @@ int i2s_dma_rx_transf_zero(i2s_config_ty
 #if defined(ARM_ARCH)
 		GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, i2s_rxdma_addr0, 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #else
-        	GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)pi2s_config->pPage0RxBuf8ptr, 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+          GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)pi2s_config->pPage0RxBuf8ptr, 0, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #endif
         }
         else
@@ -2229,7 +2271,7 @@ int i2s_dma_rx_transf_zero(i2s_config_ty
 #if defined(ARM_ARCH)
 		GdmaI2sRx(I2S_RX_FIFO_RREG_PHY, i2s_rxdma_addr1, 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #else
-                GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)pi2s_config->pPage1RxBuf8ptr, 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
+         GdmaI2sRx(I2S_RX_FIFO_RREG, (u32)pi2s_config->pPage1RxBuf8ptr, 1, I2S_PAGE_SIZE, i2s_dma_rx_handler, i2s_dma_rx_unmask_handler);
 #endif
         }
 	return 0;
@@ -2238,6 +2280,7 @@ int i2s_dma_rx_transf_zero(i2s_config_ty
 void i2s_dma_tx_handler(u32 dma_ch)
 {
 	pi2s_config->enLable = 1; /* TX:enLabel=1; RX:enLabel=2 */
+	//printk("******* %s *******\n", __func__);
 
 	if(pi2s_config->bTxDMAEnable==0) 
 	{
@@ -2255,7 +2298,7 @@ void i2s_dma_tx_handler(u32 dma_ch)
 			if (pi2s_config->tx_stop_cnt == 3)
 			{
                         	wake_up_interruptible(&(pi2s_config->i2s_tx_qh));
-				_printk("T:wake up!!\n");
+				MSG("T:wake up!!\n");
 			}
 		}
 		return;
@@ -2272,27 +2315,29 @@ void i2s_dma_tx_handler(u32 dma_ch)
 		if(pi2s_config->dmaStat[STREAM_PLAYBACK])
 		{
 			if(!pi2s_config->bTrigger[STREAM_PLAYBACK]){
-				//_printk("trigger stop: rIdx:%d widx:%d\n", pi2s_config->tx_r_idx,pi2s_config->tx_w_idx);
-                                i2s_dma_tx_transf_zero(pi2s_config, dma_ch);
-                                if(pi2s_config->bPreTrigger[STREAM_PLAYBACK]){
-                                        /* mtk04880 commented:
-                                         * for corner case, there are cases which ALSA Trigger stop before disabling DMA.
-                                         * For which case, it needs to keep call snd_pcm_elapased to keep ALSA hw ptr updating.
-                                         * It is so called post stop handlment.
-                                         */
-                                        //_printk("post-stop\n");
-                                        goto EXIT;
-                                }
-                                else{
-                                        //_printk("pre-stop\n");
-                                        wake_up_interruptible(&(pi2s_config->i2s_tx_qh));
-                                        return;
-                                }
-                        }
-                        else{
-                                if(!pi2s_config->bPreTrigger[STREAM_PLAYBACK])
-                                        pi2s_config->bPreTrigger[STREAM_PLAYBACK] = 1;
-
+				MSG("trigger stop: rIdx:%d widx:%d\n", pi2s_config->tx_r_idx,pi2s_config->tx_w_idx);
+                //i2s_dma_tx_transf_zero(pi2s_config, dma_ch);
+                i2s_dma_tx_transf_data(pi2s_config, dma_ch);
+                if(pi2s_config->bPreTrigger[STREAM_PLAYBACK]){
+                    /* mtk04880 commented:
+                     * for corner case, there are cases which ALSA Trigger stop before disabling DMA.
+                     * For which case, it needs to keep call snd_pcm_elapased to keep ALSA hw ptr updating.
+                     * It is so called post stop handlment.
+                     */
+                    //MSG("post-stop\n");
+                    goto EXIT;
+                }
+                else{
+                    //MSG("pre-stop\n");
+                    wake_up_interruptible(&(pi2s_config->i2s_tx_qh));
+                    return;
+                }
+             }
+            else{
+                    if(!pi2s_config->bPreTrigger[STREAM_PLAYBACK]){
+                            pi2s_config->bPreTrigger[STREAM_PLAYBACK] = 1;
+							MSG("bPreTrigger:STREAM_PLAYBACK\n");
+                    	}
 			}
 		}	
 	}
@@ -2346,6 +2391,7 @@ EXIT:
 void i2s_dma_rx_handler(u32 dma_ch)
 {
 	pi2s_config->enLable = 2; /* TX:enLabel=1; RX:enLabel=2 */
+	//printk("******* %s *******\n", __func__);
 #if defined(CONFIG_I2S_TXRX)
 	if(pi2s_config->rx_isr_cnt==0)
 	{
@@ -2362,7 +2408,7 @@ void i2s_dma_rx_handler(u32 dma_ch)
 	{
 		pi2s_config->rx_stop_cnt++;
 		i2s_dma_rx_soft_stop(pi2s_config, dma_ch);
-		MSG("rx_stop=%d\n", pi2s_config->rx_stop_cnt);
+		MSG("<-------------------->rx_stop=%d\n", pi2s_config->rx_stop_cnt);
 
 		if(pi2s_config->rx_stop_cnt == 2)
 		{
@@ -2376,10 +2422,10 @@ void i2s_dma_rx_handler(u32 dma_ch)
 	{
 		 if(pi2s_config->dmaStat[STREAM_CAPTURE]){
 			if(!pi2s_config->bTrigger[STREAM_CAPTURE]){
-                                MSG("trigger stop: rIdx:%d widx:%d\n", pi2s_config->rx_r_idx,pi2s_config->rx_w_idx);
-				i2s_dma_rx_transf_zero(pi2s_config, dma_ch);
-                                wake_up_interruptible(&(pi2s_config->i2s_rx_qh));
-                                return;
+                    //MSG("trigger stop: rIdx:%d widx:%d\n", pi2s_config->rx_r_idx,pi2s_config->rx_w_idx);
+					i2s_dma_rx_transf_zero(pi2s_config, dma_ch);
+                    wake_up_interruptible(&(pi2s_config->i2s_rx_qh));
+                    return;
 			}
 		 }
 	}
@@ -2560,6 +2606,7 @@ void i2s_tx_task(unsigned long pData)
 {
 	unsigned long flags;
 	spin_lock_irqsave(&pi2s_config->lock, flags);
+	MSG("******* %s *******\n", __func__);
 	//if (pi2s_config->bTxDMAEnable!=0)
 	{	
 		if (pi2s_config->tx_unmask_ch!=0)
@@ -2584,6 +2631,7 @@ void i2s_rx_task(unsigned long pData)
 {
 	unsigned long flags;
 	spin_lock_irqsave(&pi2s_config->lock, flags);
+	MSG("******* %s *******\n", __func__);
 	//if (pi2s_config->bRxDMAEnable!=0)
 	{	
 		if (pi2s_config->rx_unmask_ch!=0)
@@ -2640,12 +2688,16 @@ void i2s_dma_mask_handler(u32 dma_ch)
 
 void i2s_dma_tx_init(i2s_config_type* ptri2s_config)
 {
+	MSG("******* %s *******\n", __func__);
+
 	memset(pi2s_config->pPage0TxBuf8ptr, 0, I2S_PAGE_SIZE);
 	memset(pi2s_config->pPage1TxBuf8ptr, 0, I2S_PAGE_SIZE);
 #if defined(ARM_ARCH)
 	GdmaI2sTx(i2s_txdma_addr0, I2S_TX_FIFO_WREG_PHY, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 	GdmaI2sTx(i2s_txdma_addr1, I2S_TX_FIFO_WREG_PHY, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #else
+	//finish dma exec i2s_dma_tx_handler func
+	//start dma exec i2s_dma_tx_unmask_handler func
 	GdmaI2sTx((u32)ptri2s_config->pPage0TxBuf8ptr, I2S_FIFO_WREG, 0, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 	GdmaI2sTx((u32)ptri2s_config->pPage1TxBuf8ptr, I2S_FIFO_WREG, 1, I2S_PAGE_SIZE, i2s_dma_tx_handler, i2s_dma_tx_unmask_handler);
 #endif
@@ -2655,6 +2707,8 @@ void i2s_dma_tx_init(i2s_config_type* pt
 
 void i2s_dma_rx_init(i2s_config_type* ptri2s_config)
 {
+	MSG("******* %s *******\n", __func__);
+
 	memset(pi2s_config->pPage0RxBuf8ptr, 0, I2S_PAGE_SIZE);
 	memset(pi2s_config->pPage1RxBuf8ptr, 0, I2S_PAGE_SIZE);
 
@@ -2674,19 +2728,18 @@ void i2s_dma_tx_end_handle(i2s_config_ty
 	if (ptri2s_config->tx_w_idx < ptri2s_config->tx_r_idx)
         {
         	ptri2s_config->end_cnt = (ptri2s_config->tx_w_idx + MAX_I2S_PAGE)-ptri2s_config->tx_r_idx;
-                _printk("case1: w=%d, r=%d, end=%d\n", ptri2s_config->tx_w_idx, ptri2s_config->tx_r_idx, ptri2s_config->end_cnt);
+                MSG("case1: w=%d, r=%d, end=%d\n", ptri2s_config->tx_w_idx, ptri2s_config->tx_r_idx, ptri2s_config->end_cnt);
         }
         else if (ptri2s_config->tx_w_idx > ptri2s_config->tx_r_idx)
         {
                 ptri2s_config->end_cnt = ptri2s_config->tx_w_idx-ptri2s_config->tx_r_idx;
-                _printk("case2: w=%d, r=%d, end=%d\n", ptri2s_config->tx_w_idx, ptri2s_config->tx_r_idx, ptri2s_config->end_cnt);
+                MSG("case2: w=%d, r=%d, end=%d\n", ptri2s_config->tx_w_idx, ptri2s_config->tx_r_idx, ptri2s_config->end_cnt);
         }
 	else
 	{
-		_printk("case3: w=%d, r=%d, end=%d\n", ptri2s_config->tx_w_idx, ptri2s_config->tx_r_idx, ptri2s_config->end_cnt);
+		MSG("case3: w=%d, r=%d, end=%d\n", ptri2s_config->tx_w_idx, ptri2s_config->tx_r_idx, ptri2s_config->end_cnt);
 		
 	}
-
 	if (ptri2s_config->end_cnt > 0)
 	{
 		interruptible_sleep_on(&(ptri2s_config->i2s_tx_qh));
@@ -3040,12 +3093,12 @@ int i2s_ioctl (struct inode *inode, stru
 #if defined(CONFIG_I2S_WM8960)||defined(CONFIG_I2S_WM8750)||defined(CONFIG_I2S_WM8751)
 		audiohw_set_lineout_vol(1, ptri2s_config->txvol, ptri2s_config->txvol);
 #endif
-		GdmaUnMaskChannel(GDMA_I2S_TX0);
+		//GdmaUnMaskChannel(GDMA_I2S_TX0);
 
 		i2s_tx_enable(ptri2s_config);
 	
 		/* Kick off dma channel */	
-		//GdmaUnMaskChannel(GDMA_I2S_TX0);
+		GdmaUnMaskChannel(GDMA_I2S_TX0);
 
 		MSG("I2S_TXENABLE done\n");
 		spin_unlock_irqrestore(&ptri2s_config->lock, flags);
@@ -3300,16 +3353,15 @@ char* i2s_memPool_Alloc(i2s_config_type*
         if(!ptri2s_config)
                 return NULL;
         if(dir == STREAM_PLAYBACK){
-#if defined(CONFIG_I2S_MMAP)
-                i2s_mmap_alloc(I2S_TOTAL_PAGE_SIZE);
-#endif
-                i2s_txbuf_alloc(ptri2s_config);
+			if(ptri2s_config->is_tx_mmap)
+				i2s_mmap_alloc(I2S_TOTAL_PAGE_SIZE,dir);
+			i2s_txbuf_alloc(ptri2s_config);
+					
 		return ptri2s_config->pMMAPTxBufPtr[0];
         }else{
-#if defined(CONFIG_I2S_MMAP)
-                i2s_mmap_alloc(I2S_TOTAL_PAGE_SIZE);
-#endif
-		i2s_rxbuf_alloc(ptri2s_config);	
+        	if(ptri2s_config->is_rx_mmap)
+				i2s_mmap_alloc(I2S_TOTAL_PAGE_SIZE,dir);					
+			i2s_rxbuf_alloc(ptri2s_config);	
 		return ptri2s_config->pMMAPRxBufPtr[0];
 	}
         return NULL;
@@ -3319,16 +3371,17 @@ void i2s_memPool_free(i2s_config_type* p
 {
         if(!ptri2s_config)
                 return;
+		MSG("is_tx_mmap:%d\n",ptri2s_config->is_tx_mmap);
+		MSG("is_rx_mmap:%d\n",ptri2s_config->is_rx_mmap);
         if(dir == STREAM_PLAYBACK){
-#if defined(CONFIG_I2S_MMAP)
-		i2s_mem_unmap(ptri2s_config);
-#endif
-		i2s_txbuf_free(ptri2s_config);
+			if(ptri2s_config->is_tx_mmap)
+				i2s_mem_unmap(ptri2s_config,dir);
+			i2s_txbuf_free(ptri2s_config);
+			
         }else{
-#if defined(CONFIG_I2S_MMAP)
-		i2s_mem_unmap(ptri2s_config);
-#endif
-		i2s_rxbuf_free(ptri2s_config);
+        	if(ptri2s_config->is_rx_mmap)
+				i2s_mem_unmap(ptri2s_config,dir);
+			i2s_rxbuf_free(ptri2s_config);
         }
 
         return;
@@ -3362,6 +3415,8 @@ int i2s_page_release(i2s_config_type* pt
 
 int i2s_startup(void)
 {
+	MSG("%s*******************\n",__func__);
+
 	memset(pi2s_config, 0, sizeof(i2s_config_type));
 	
 #ifdef I2S_STATISTIC
@@ -3370,9 +3425,8 @@ int i2s_startup(void)
 
 	i2s_param_init(pi2s_config);
 	pi2s_config->bALSAEnable = 1;
-#if defined(CONFIG_I2S_MMAP)
-	pi2s_config->bALSAMMAPEnable = 1;
-#endif
+	
+
 
 #if defined (CONFIG_RALINK_MT7628) || defined(CONFIG_ARCH_MT7623)
 	pi2s_config->little_edn = 1;
@@ -3393,6 +3447,7 @@ int gdma_En_Switch(i2s_config_type* ptri
                 //MSG("%s:%d\n",__func__,ptri2s_config->bTxDMAEnable);
         }else{
                 ptri2s_config->bRxDMAEnable = enabled;
+				MSG("%s:%d\n",__func__,ptri2s_config->bRxDMAEnable);
         }
         return 0;
 }
@@ -3422,11 +3477,11 @@ void gdma_unmask_handler(u32 dma_ch)
 	return;
 }
 
-u32 i2s_mmap_phys_addr(i2s_config_type* ptri2s_config)
+u32 i2s_mmap_phys_addr(i2s_config_type* ptri2s_config,int dir)
 {
-	if((ptri2s_config->pMMAPBufPtr[0]!=NULL) && (ptri2s_config->mmap_index == MAX_I2S_PAGE))
+	if((ptri2s_config->pMMAPBufPtr[0]!=NULL) && (dir == STREAM_PLAYBACK))
 		return (dma_addr_t)i2s_mmap_addr[0];
-	else if((ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]!=NULL) && (ptri2s_config->mmap_index == MAX_I2S_PAGE*2))
+	else if((ptri2s_config->pMMAPBufPtr[MAX_I2S_PAGE]!=NULL) && (dir == STREAM_CAPTURE))
 		return (dma_addr_t)i2s_mmap_addr[MAX_I2S_PAGE];
 	else
 		return -1;
--- a/sound/soc/mtk/i2s_ctrl.h
+++ b/sound/soc/mtk/i2s_ctrl.h
@@ -212,7 +212,9 @@
 
 /* Constant definition */
 #define NFF_THRES		4
-#define I2S_PAGE_SIZE		3072//(3*4096)//(1152*2*2*2)
+//#define I2S_PAGE_SIZE		3072//(3*4096)//(1152*2*2*2)
+#define I2S_PAGE_SIZE		6144//(3*4096)//(1152*2*2*2)
+
 #define I2S_MIN_PAGE_SIZE	4096
 #define MAX_I2S_PAGE		8
 #define I2S_TOTAL_PAGE_SIZE 	(I2S_PAGE_SIZE*MAX_I2S_PAGE)
@@ -344,6 +346,8 @@ typedef struct i2s_config_t
 	int enLable;
 	int micboost;
 	int micin;
+	int is_tx_mmap;
+	int is_rx_mmap;
 	
 	/* parameters fo ALSA */
 	int bALSAEnable;
@@ -426,9 +430,10 @@ typedef struct i2s_config_t
 
 }i2s_config_type;
 
+int i2s_mmap_alloc(unsigned long size,int dir);
 
 void i2s_gen_test_pattern(void);
-int i2s_mem_unmap(i2s_config_type* ptri2s_config);
+int i2s_mem_unmap(i2s_config_type* ptri2s_config,int dir);
 int i2s_param_init(i2s_config_type* ptri2s_config);
 int i2s_txbuf_alloc(i2s_config_type* ptri2s_config);
 int i2s_rxbuf_alloc(i2s_config_type* ptri2s_config);
@@ -510,7 +515,8 @@ int i2s_audio_exchange(i2s_config_type*
 void gdma_unmask_handler(u32 dma_ch);
 char* i2s_memPool_Alloc(i2s_config_type* ptri2s_config,int dir);
 void i2s_memPool_free(i2s_config_type* ptri2s_config,int dir);
-u32 i2s_mmap_phys_addr(i2s_config_type* ptri2s_config);
+u32 i2s_mmap_phys_addr(i2s_config_type* ptri2s_config,int dir);
+
 
 #if !defined(CONFIG_I2S_TXRX)
 #define GdmaI2sRx	//GdmaI2sRx
--- a/sound/soc/mtk/mt76xx_i2s.c
+++ b/sound/soc/mtk/mt76xx_i2s.c
@@ -82,7 +82,7 @@ const struct snd_soc_component_driver mt
 
 struct snd_soc_dai_driver mt76xx_i2s_dai = {
 	.playback = {
-		.channels_min = 1,
+		.channels_min = 2,
 		.channels_max = 2,
 		.rates = (SNDRV_PCM_RATE_8000|SNDRV_PCM_RATE_11025|\
 		SNDRV_PCM_RATE_16000|SNDRV_PCM_RATE_22050|SNDRV_PCM_RATE_32000|\
@@ -92,7 +92,7 @@ struct snd_soc_dai_driver mt76xx_i2s_dai
 				SNDRV_PCM_FMTBIT_S24_LE),
 	},
 	.capture = {
-		.channels_min = 1,
+		.channels_min = 2,
 		.channels_max = 2,
 		.rates = (SNDRV_PCM_RATE_8000|SNDRV_PCM_RATE_11025|\
 				SNDRV_PCM_RATE_16000|SNDRV_PCM_RATE_22050|SNDRV_PCM_RATE_32000|\
@@ -144,9 +144,9 @@ static int mt76xx_i2s_rec_prepare(struct
 	i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
 	rtd->pss[SNDRV_PCM_STREAM_CAPTURE] = substream;
 	if(! rtd->i2sStat[SNDRV_PCM_STREAM_CAPTURE]) {
+		gdma_En_Switch(rtd, STREAM_CAPTURE, GDMA_I2S_EN);
 		i2s_reset_rx_param(rtd);
 		i2s_rx_config(rtd);
-		gdma_En_Switch(rtd, STREAM_CAPTURE, GDMA_I2S_EN);
 
 		if(rtd->bTxDMAEnable==0)
 			i2s_clock_enable(rtd);
@@ -168,14 +168,15 @@ static int mt76xx_i2s_rec_prepare(struct
 static int  mt76xx_i2s_startup(struct snd_pcm_substream *substream,
 		       struct snd_soc_dai *dai)
 {
-
-	//printk("******* %s *******\n", __func__);
-    	if((!pi2s_config->i2sStat[SNDRV_PCM_STREAM_PLAYBACK]) && (!pi2s_config->i2sStat[SNDRV_PCM_STREAM_CAPTURE])){
+    if((!pi2s_config->i2sStat[SNDRV_PCM_STREAM_PLAYBACK]) && 
+	   (!pi2s_config->i2sStat[SNDRV_PCM_STREAM_CAPTURE]) && 
+	   (pi2s_config->mmap_index == 0)){
 		i2s_startup();
     		if(!pi2s_config)
     			return -1;
     		i2s_reset_config(pi2s_config);
-    	}
+			
+    }
 	substream->runtime->private_data = pi2s_config;
 	return 0;
 }
@@ -187,7 +188,6 @@ static int mt76xx_i2s_hw_params(struct s
 	//unsigned long data;
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	i2s_config_type* rtd = runtime->private_data;
-
 	//printk("******* %s *******\n", __func__);
 	switch(params_rate(params)){
 	case 8000:
@@ -210,12 +210,13 @@ static int mt76xx_i2s_hw_params(struct s
 		//MSG("audio sampling rate %u should be %d ~ %d Hz\n", (u32)params_rate(params), MIN_SRATE_HZ, MAX_SRATE_HZ);
 		break;
 	}
-	if(srate){
+	if(srate){ 
 		if((rtd->bRxDMAEnable != GDMA_I2S_EN) && (rtd->bTxDMAEnable != GDMA_I2S_EN)){
 			rtd->srate = srate;
 			MSG("set audio sampling rate to %d Hz\n", rtd->srate);
 		}
 	}
+	
 
 	return 0;
 }
--- a/sound/soc/mtk/mt76xx_pcm.c
+++ b/sound/soc/mtk/mt76xx_pcm.c
@@ -32,6 +32,8 @@
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
 #include <sound/initval.h>
+#include <linux/delay.h>
+
 #include "ralink_gdma.h"
 #include "mt76xx_i2s.h"
 
@@ -82,7 +84,8 @@ static const struct snd_pcm_hardware mt7
 				SNDRV_PCM_INFO_PAUSE |
 				SNDRV_PCM_INFO_RESUME),
 #endif
-	.formats		= SNDRV_PCM_FMTBIT_S16_LE,
+	.formats		= SNDRV_PCM_FMTBIT_S16_LE|SNDRV_PCM_FMTBIT_S24_LE,
+	.rates 			= SNDRV_PCM_RATE_8000_48000,
 	.period_bytes_min	= GDMA_PAGE_SIZE,
 	.period_bytes_max	= GDMA_PAGE_SIZE,
 	.periods_min		= 1,
@@ -122,7 +125,7 @@ struct snd_soc_platform mt76xx_soc_platf
 
 static int mt76xx_pcm_close(struct snd_pcm_substream *substream){
 
-	//printk("******* %s *********\n", __func__);
+	//MSG("******* %s *********\n", __func__);
 	return 0;
 }
 
@@ -132,15 +135,15 @@ static snd_pcm_uframes_t mt76xx_pcm_poin
 	i2s_config_type* rtd = runtime->private_data;
 	unsigned int offset = 0;
 	//int buff_frame_bond = bytes_to_frames(runtime, GDMA_PAGE_SIZE);
-	//printk("\n******* %s *********\n", __func__);
+	//MSG("\n******* %s *********\n", __func__);
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
 		offset = bytes_to_frames(runtime, GDMA_PAGE_SIZE*rtd->tx_r_idx);
-		//printk("r:%d w:%d (%d) \n",rtd->tx_r_idx,rtd->tx_w_idx,(runtime->control->appl_ptr/buff_frame_bond)%GDMA_PAGE_NUM);
+		//MSG("r:%d w:%d (%d) \n",rtd->tx_r_idx,rtd->tx_w_idx,(runtime->control->appl_ptr/buff_frame_bond)%GDMA_PAGE_NUM);
 	}
 	else{
 		offset = bytes_to_frames(runtime, GDMA_PAGE_SIZE*rtd->rx_w_idx);
-		//printk("w:%d r:%d appl_ptr:%x\n",rtd->rx_w_idx,rtd->rx_r_idx,(runtime->control->appl_ptr/buff_frame_bond)%GDMA_PAGE_NUM);
+		//MSG("w:%d r:%d appl_ptr:%x\n",rtd->rx_w_idx,rtd->rx_r_idx,(runtime->control->appl_ptr/buff_frame_bond)%GDMA_PAGE_NUM);
 	}
 	return offset;
 }
@@ -152,20 +155,25 @@ static int mt76xx_pcm_trigger(struct snd
 	i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
 	//struct snd_pcm_runtime *runtime= substream->runtime;
 
-	//printk("******* %s *********\n", __func__);
-/*	printk("trigger cmd:%s\n",(cmd==SNDRV_PCM_TRIGGER_START)?"START":\
+	//MSG("******* %s *********\n", __func__);
+	MSG("%s:trigger cmd:%s\n",(substream->stream == SNDRV_PCM_STREAM_PLAYBACK)?"PLAYBACK":"CAPTURE",\
+			(cmd==SNDRV_PCM_TRIGGER_START)?"START":\
 			(cmd==SNDRV_PCM_TRIGGER_RESUME)?"RESUME":\
 			(cmd==SNDRV_PCM_TRIGGER_PAUSE_RELEASE)?"PAUSE_RELEASE":\
 			(cmd==SNDRV_PCM_TRIGGER_STOP)?"STOP":\
 			(cmd==SNDRV_PCM_TRIGGER_SUSPEND)?"SUSPEND":\
 			(cmd==SNDRV_PCM_TRIGGER_PAUSE_PUSH)?"PAUSE_PUSH":"default");
-*/
+
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
 		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 			rtd->bTrigger[SNDRV_PCM_STREAM_PLAYBACK] = 1;
+			rtd->dmaStat[SNDRV_PCM_STREAM_PLAYBACK] = 1;
+			gdma_unmask_handler(GDMA_I2S_TX0);
 		} else {
 			rtd->bTrigger[SNDRV_PCM_STREAM_CAPTURE] = 1;
+			rtd->dmaStat[SNDRV_PCM_STREAM_CAPTURE] = 1;
+			gdma_unmask_handler(GDMA_I2S_RX0);
 		}
 		break;
 	case SNDRV_PCM_TRIGGER_STOP:
@@ -208,16 +216,16 @@ static int mt76xx_pcm_copy(struct snd_pc
         int rx_r_idx = 0;
         char *hwbuf = NULL;
 
-	//printk("******* %s *********\n", __func__);
+	//MSG("******* %s *********\n", __func__);
 	hwbuf = runtime->dma_area + frames_to_bytes(runtime, pos);
 	//MSG("%s bur:%x\n",__func__,hwbuf);
-	//printk("hw_ptr:%d, buffer_size:%d, appl_prt:%d, boundary:%d\n", 
+	//MSG("hw_ptr:%d, buffer_size:%d, appl_prt:%d, boundary:%d\n", 
 	//		runtime->status->hw_ptr, runtime->buffer_size, runtime->control->appl_ptr, runtime->boundary);
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
 		rtd->tx_w_idx = (rtd->tx_w_idx+1)%MAX_I2S_PAGE;
                 tx_w_idx = rtd->tx_w_idx;
-                //printk("put TB[%d - %x] for user write\n",rtd->tx_w_idx,pos);
+                //MSG("put TB[%d - %x] for user write\n",rtd->tx_w_idx,pos);
                 copy_from_user(rtd->pMMAPTxBufPtr[tx_w_idx], (char*)buf, I2S_PAGE_SIZE);	
 	}
 	else{
@@ -230,11 +238,53 @@ static int mt76xx_pcm_copy(struct snd_pc
 
 static int mt76xx_pcm_mmap(struct snd_pcm_substream *substream, struct vm_area_struct *vma)
 {
-        int ret;
+        int ret = 0;
+		int i = 0;
         unsigned long size;
+		struct snd_dma_buffer *buf = &substream->dma_buffer;
+		i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
+		int  dir = substream->stream;
+
+		mt76xx_pcm_free_dma_buffer(substream,substream->stream);
+		i2s_mmap_alloc(I2S_TOTAL_PAGE_SIZE,dir);
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			rtd->is_tx_mmap = 1;
+		else
+			rtd->is_rx_mmap = 1;
 
-        size = vma->vm_end-vma->vm_start;
-        printk("******* %s: size :%lx end:%lx start:%lx *******\n", __func__,size,vma->vm_end,vma->vm_start);
+		if(!buf->area){
+			MSG("<><><><><><>mt76xx_pcm_mmap<><><><>\n");
+			buf->dev.dev = NULL;
+			buf->private_data = NULL;
+			if(dir == SNDRV_PCM_STREAM_PLAYBACK){
+				for( i = 0 ; i < MAX_I2S_PAGE ; i ++ ){
+					rtd->pMMAPTxBufPtr[i] = rtd->pMMAPBufPtr[i];
+					memset(rtd->pMMAPTxBufPtr[i], 0, I2S_PAGE_SIZE);
+				}
+				buf->area = rtd->pMMAPTxBufPtr[0];
+			}
+			else{
+				for( i = 0 ; i < MAX_I2S_PAGE ; i ++ ){
+					rtd->pMMAPRxBufPtr[i] = rtd->pMMAPBufPtr[i + MAX_I2S_PAGE];
+					memset(rtd->pMMAPRxBufPtr[i], 0, I2S_PAGE_SIZE);
+				}
+				buf->area = rtd->pMMAPRxBufPtr[0];		
+			}
+			if (!buf->area)
+				return -ENOMEM;
+			buf->bytes = GDMA_TOTAL_PAGE_SIZE;
+		
+			buf->dev.type = SNDRV_DMA_TYPE_DEV;
+			buf->addr = i2s_mmap_phys_addr(rtd,dir);
+			
+			snd_pcm_set_runtime_buffer(substream, buf);
+		}
+
+		if(rtd->is_rx_mmap || rtd->is_tx_mmap)
+			rtd->bALSAMMAPEnable = 1;
+		
+        size = vma->vm_end - vma->vm_start;
+        MSG("******* %s: size :%lx end:%lx start:%lx *******\n", __func__,size,vma->vm_end,vma->vm_start);
         ret = i2s_mmap_remap(vma, size);
 
         return ret;
@@ -248,25 +298,25 @@ static int mt76xx_pcm_prepare(struct snd
 	//runtime->buffer_size = GDMA_PAGE_NUM*GDMA_PAGE_SIZE;
 	//runtime->boundary = (GDMA_PAGE_NUM*GDMA_PAGE_SIZE)/4;
 
-	//printk("******* %s *******\n", __func__);
+	MSG("******* %s *******\n", __func__);
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
-		//printk("===== %s:%s:%d =====\n", __FILE__, __func__, __LINE__);
-		mt76xx_pcm_allocate_dma_buffer(substream,SNDRV_PCM_STREAM_PLAYBACK);
+		//MSG("===== %s:%s:%d =====\n", __FILE__, __func__, __LINE__);
+		//mt76xx_pcm_allocate_dma_buffer(substream,SNDRV_PCM_STREAM_PLAYBACK);
 		
 		if(! rtd->dmaStat[SNDRV_PCM_STREAM_PLAYBACK]){
+			MSG("******* prepare: SNDRV_PCM_STREAM_PLAYBACK*******\n");
 			i2s_page_prepare(rtd,STREAM_PLAYBACK);
 			tasklet_init(&i2s_tx_tasklet, i2s_tx_task, (u32)rtd);
-			rtd->dmaStat[SNDRV_PCM_STREAM_PLAYBACK] = 1;
-			gdma_unmask_handler(GDMA_I2S_TX0);
+			//start or stop dma ?
 		}
 	} else {
-		mt76xx_pcm_allocate_dma_buffer(substream,SNDRV_PCM_STREAM_CAPTURE);
+		//mt76xx_pcm_allocate_dma_buffer(substream,SNDRV_PCM_STREAM_CAPTURE);
 
 		if(! rtd->dmaStat[SNDRV_PCM_STREAM_CAPTURE]){
+			MSG("******* prepare: SNDRV_PCM_STREAM_CAPTURE*******\n");
 			i2s_page_prepare(rtd,STREAM_CAPTURE); /* TX:enLabel=1; RX:enLabel=2 */
 			tasklet_init(&i2s_rx_tasklet, i2s_rx_task, (u32)rtd);
-			rtd->dmaStat[SNDRV_PCM_STREAM_CAPTURE] = 1;
-			gdma_unmask_handler(GDMA_I2S_RX0);
+			//rtd->dmaStat[SNDRV_PCM_STREAM_CAPTURE] = 1;
 		}
 	}
 
@@ -277,13 +327,17 @@ static int mt76xx_pcm_prepare(struct snd
 static int mt76xx_pcm_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_pcm_hw_params *hw_params)
 {
-	/*struct snd_pcm_runtime *runtime = substream->runtime;
+	//struct snd_pcm_runtime *runtime = substream->runtime;
+	/*
 	i2s_config_type *rtd = (i2s_config_type*)runtime->private_data;
 	*/
 	int ret,i;
 	ret = i = 0;
+	
+	
 
-	//printk("******* %s *******\n", __func__);
+
+	//MSG("******* %s *******\n", __func__);
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
 		//i2s_page_prepare(rtd,STREAM_PLAYBACK);
 	} else {
@@ -298,23 +352,22 @@ static int mt76xx_pcm_hw_free(struct snd
 	i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
 	//struct snd_dma_buffer *buf = &substream->dma_buffer;
 
-	//printk("******* %s *******\n", __func__);
+	MSG("******* %s *******\n", __func__);
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
 		if(rtd->dmaStat[SNDRV_PCM_STREAM_PLAYBACK]){
-
 			gdma_En_Switch(rtd,STREAM_PLAYBACK,GDMA_I2S_DIS);
 			i2s_tx_end_sleep_on(rtd);
 			tasklet_kill(&i2s_tx_tasklet);
-			i2s_tx_disable(rtd);
+			i2s_tx_disable(rtd);			
 			//mt76xx_pcm_free_dma_buffer(substream,substream->stream);
 			i2s_page_release(rtd,STREAM_PLAYBACK);
 			rtd->dmaStat[SNDRV_PCM_STREAM_PLAYBACK] = 0;
 		}
 		mt76xx_pcm_free_dma_buffer(substream,substream->stream);
+		rtd->is_tx_mmap = 0;
 	}
 	else{
 		if(rtd->dmaStat[SNDRV_PCM_STREAM_CAPTURE]){
-
 			gdma_En_Switch(rtd,STREAM_CAPTURE,GDMA_I2S_DIS);
 			i2s_rx_end_sleep_on(rtd);
 			tasklet_kill(&i2s_rx_tasklet);
@@ -324,6 +377,7 @@ static int mt76xx_pcm_hw_free(struct snd
 			rtd->dmaStat[SNDRV_PCM_STREAM_CAPTURE] = 0;
 		}
 		mt76xx_pcm_free_dma_buffer(substream,substream->stream);
+		rtd->is_rx_mmap = 0;
 	}
 	return 0;
 }
@@ -336,13 +390,17 @@ static int mt76xx_pcm_free_dma_buffer(st
 	struct snd_dma_buffer *buf = &substream->dma_buffer;
 	i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
 
-	//printk("******* %s *******\n", __func__);
 	if (!buf->area)
 		return 0;
-	if(substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+	if(substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
 		i2s_memPool_free(rtd,STREAM_PLAYBACK);
-	else
+		printk("playback free_dma_buffer\n");
+	}
+	else{
 		i2s_memPool_free(rtd,STREAM_CAPTURE);
+		printk("capture free_dma_buffer\n");
+	}
+	printk("ptri2s_config->mmap_index:%d\n",rtd->mmap_index);
 	buf->area = NULL;
 	snd_pcm_set_runtime_buffer(substream, NULL);
 	return 0;
@@ -355,30 +413,32 @@ static int mt76xx_pcm_allocate_dma_buffe
 	struct snd_dma_buffer *buf = &substream->dma_buffer;
 	i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
 
-	//printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	if(!buf->area){
-#if defined(CONFIG_I2S_MMAP)
-		printk("\n############## MMAP ##############\n");
-		buf->dev.type = SNDRV_DMA_TYPE_DEV;
-#else
-		buf->dev.type = SNDRV_DMA_TYPE_UNKNOWN;
-#endif
 		buf->dev.dev = NULL;
 		buf->private_data = NULL;
-		if(stream == SNDRV_PCM_STREAM_PLAYBACK)
+		if(stream == SNDRV_PCM_STREAM_PLAYBACK){
 			buf->area = i2s_memPool_Alloc(rtd,STREAM_PLAYBACK);
-		else
+		}
+		else{
 			buf->area = i2s_memPool_Alloc(rtd,STREAM_CAPTURE);
 
+		}
 		if (!buf->area)
 			return -ENOMEM;
 		buf->bytes = GDMA_TOTAL_PAGE_SIZE;
-#if defined(CONFIG_I2S_MMAP)
-		buf->addr = i2s_mmap_phys_addr(rtd);
-#endif
+
+		if(rtd->is_tx_mmap || rtd->is_rx_mmap){
+			buf->dev.type = SNDRV_DMA_TYPE_DEV;
+			buf->addr = i2s_mmap_phys_addr(rtd,stream);
+		}
+		else{
+			buf->dev.type = SNDRV_DMA_TYPE_UNKNOWN;
+		}
+
 		snd_pcm_set_runtime_buffer(substream, buf);
 	} else{
-		//printk("Buffer have been allocated!\n");
+		//MSG("Buffer have been allocated!\n");
 	}
 
 	return 0;
@@ -388,10 +448,11 @@ static int mt76xx_pcm_open(struct snd_pc
 {
 	struct snd_pcm_runtime *runtime= substream->runtime;
 	struct snd_dma_buffer *buf = &substream->dma_buffer;
+	i2s_config_type* rtd = (i2s_config_type*)substream->runtime->private_data;
 	int stream = substream->stream;
 	int ret = 0;
 
-	//printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	snd_soc_set_runtime_hwparams(substream, &mt76xx_pcm_hwparam);
 	/* ensure that buffer size is a multiple of period size */
 	ret = snd_pcm_hw_constraint_integer(runtime,
@@ -399,6 +460,9 @@ static int mt76xx_pcm_open(struct snd_pc
 	if (ret < 0)
 		goto out;
 
+	ret = snd_pcm_hw_constraint_minmax(runtime,SNDRV_PCM_HW_PARAM_BUFFER_SIZE,runtime->hw.period_bytes_min*2,runtime->hw.period_bytes_min*2);
+	if (ret < 0)
+		goto out;
 #if 1
 	if(stream == SNDRV_PCM_STREAM_PLAYBACK){
 		ret = mt76xx_pcm_allocate_dma_buffer(substream,
@@ -409,7 +473,6 @@ static int mt76xx_pcm_open(struct snd_pc
 				SNDRV_PCM_STREAM_CAPTURE);
 	}
 #endif
-
 	if (ret)
 		goto out;
 
@@ -426,7 +489,7 @@ static int mt76xx_pcm_new(struct snd_soc
 {
 //	int ret = 0;
 
-	//printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	return 0;
 }
 
@@ -437,20 +500,20 @@ static void mt76xx_pcm_free(struct snd_p
 	i2s_config_type* rtd;
 	int stream;
 */
-	//printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	//return 0;
 }
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,20)
 static int mt76xx_platform_drv_probe(struct platform_device *pdev)
 {
-	//printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	return snd_soc_register_platform(&pdev->dev, &mt76xx_soc_platform);
 }
 
 static int mt76xx_platform_drv_remove(struct platform_device *pdev)
 {
-	//printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	snd_soc_unregister_platform(&pdev->dev);
 	return 0;
 }
@@ -468,7 +531,7 @@ static struct platform_driver mt76xx_pcm
 static int __init mt76xx_pcm_init(void)
 {
 
-	printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	return platform_driver_register(&mt76xx_pcm_driver);
 }
 
@@ -480,13 +543,13 @@ static void __exit mt76xx_pcm_exit(void)
 static int __init mt76xx_pcm_init(void)
 {
 
-	printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	return snd_soc_register_platform(&mt76xx_soc_platform);
 }
 
 static void __exit mt76xx_pcm_exit(void)
 {
-	printk("******* %s *******\n", __func__);
+	//MSG("******* %s *******\n", __func__);
 	snd_soc_unregister_platform(&mt76xx_soc_platform);
 }
 #endif
--- a/sound/soc/mtk/ralink_gdma.c
+++ b/sound/soc/mtk/ralink_gdma.c
@@ -48,6 +48,7 @@
 #include <linux/kernel.h>
 #include <linux/interrupt.h>
 #include <linux/fs.h>
+#include <linux/delay.h>
 #if defined (CONFIG_MIPS)
   #include <asm/uaccess.h>
   #include <asm/addrspace.h>
@@ -228,7 +229,7 @@ int GdmaReqQuickIns(uint32_t ChNum)
 int _GdmaReqEntryIns(GdmaReqEntry *NewEntry)
 {
     uint32_t Data=0;
-
+#if 0
     GDMA_PRINT("== << GDMA Control Reg (Channel=%d) >> ===\n", NewEntry->ChNum);
     GDMA_PRINT(" Channel Source Addr = %x \n", NewEntry->Src);
     GDMA_PRINT(" Channel Dest Addr = %x \n", NewEntry->Dst);
@@ -257,14 +258,15 @@ int _GdmaReqEntryIns(GdmaReqEntry *NewEn
     GDMA_PRINT("Next Unmasked Channel=%d\n", NewEntry->NextUnMaskCh);
     GDMA_PRINT("Channel Mask=%d\n", NewEntry->ChMask);
     GDMA_PRINT("========================================\n");
+#endif 
 
     GDMA_WRITE_REG(GDMA_SRC_REG(NewEntry->ChNum), NewEntry->Src);
-    GDMA_PRINT("SrcAddr: Write %0X to %X\n", \
-	    NewEntry->Src, GDMA_SRC_REG(NewEntry->ChNum));
+    //GDMA_PRINT("SrcAddr: Write %0X to %X\n", \
+	   // NewEntry->Src, GDMA_SRC_REG(NewEntry->ChNum));
 
     GDMA_WRITE_REG(GDMA_DST_REG(NewEntry->ChNum), NewEntry->Dst);
-    GDMA_PRINT("DstAddr: Write %0X to %X\n", \
-	    NewEntry->Dst, GDMA_DST_REG(NewEntry->ChNum));
+    //GDMA_PRINT("DstAddr: Write %0X to %X\n", \
+	 //   NewEntry->Dst, GDMA_DST_REG(NewEntry->ChNum));
 
     Data |= ( (NewEntry->NextUnMaskCh) << NEXT_UNMASK_CH_OFFSET); 
     Data |= ( NewEntry->ChMask << CH_MASK_OFFSET); 
@@ -283,7 +285,7 @@ int _GdmaReqEntryIns(GdmaReqEntry *NewEn
 #endif
 
     GDMA_WRITE_REG(GDMA_CTRL_REG1(NewEntry->ChNum), Data);
-    GDMA_PRINT("CTRL1: Write %08X to %8X\n", Data, GDMA_CTRL_REG1(NewEntry->ChNum));
+    //GDMA_PRINT("CTRL1: Write %08X to %8X\n", Data, GDMA_CTRL_REG1(NewEntry->ChNum));
 
     Data = ((NewEntry->TransCount) << TRANS_CNT_OFFSET); 
 #if defined (CONFIG_RALINK_RT3052)
@@ -306,7 +308,7 @@ int _GdmaReqEntryIns(GdmaReqEntry *NewEn
     Data |= (0x01<<CH_EBL_OFFSET); 
     GDMA_WRITE_REG(GDMA_CTRL_REG(NewEntry->ChNum), Data);
     //GDMA_READ_REG(GDMA_CTRL_REG(NewEntry->ChNum));
-    GDMA_PRINT("CTRL: Write %08X to %8X\n", Data, GDMA_CTRL_REG(NewEntry->ChNum));    
+    //GDMA_PRINT("CTRL: Write %08X to %8X\n", Data, GDMA_CTRL_REG(NewEntry->ChNum));    
      //if there is no interrupt handler, this function will 
     //return 1 until GDMA done.
     if(NewEntry->DoneIntCallback==NULL) { 
@@ -800,30 +802,29 @@ irqreturn_t GdmaIrqHandler(
 	if(GdmaUnMaskStatus & (0x1 << (UNMASK_INT_STATUS(Ch))) ) {
 	    if(GdmaUnMaskIntCallback[Ch] != NULL) {
 		GdmaUnMaskIntCallback[Ch](Ch);
-	      // printk("GdmaUnMaskIntCallback \n");	
+	      // printk("GdmaUnMaskIntCallback \n");
 	    }
 	}
      }	
-  
     //write 1 clear
 #if defined (CONFIG_RALINK_RT3052)	
      GDMA_WRITE_REG(RALINK_GDMAISTS, GdmaDoneStatus); 
 #elif defined (CONFIG_RALINK_RT3883) || defined (CONFIG_RALINK_RT3352) || defined (CONFIG_RALINK_RT5350) || defined (CONFIG_RALINK_RT6855) || defined (CONFIG_RALINK_RT6855A) || defined (CONFIG_RALINK_MT7620)  ||  defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628) || defined (CONFIG_ARCH_MT7623)
      GDMA_WRITE_REG(RALINK_GDMA_DONEINT, GdmaDoneStatus); 
 #endif
-
+	
      //printk("interrupt status = %x \n", GdmaDoneStatus);
      //processing done
      for(Ch=0;Ch<MAX_GDMA_CHANNEL;Ch++) {
 			if(GdmaDoneStatus & (0x1<<Ch)) {
-	    	if(GdmaDoneIntCallback[Ch] != NULL) {
-	    		//printk("*************Interrupt Ch=%d***********\n", Ch);
-					GdmaDoneIntCallback[Ch](Ch); 
-	    	}
+		    	if(GdmaDoneIntCallback[Ch] != NULL) {
+						GdmaDoneIntCallback[Ch](Ch); 
+						//printk("DoneInt Ch=%d\n", Ch);
+		    	}
 			}
     }
 
-//printk("interrupt status clear = %x \n", GDMA_READ_REG(RALINK_GDMA_DONEINT));
+	//printk("interrupt  clear = %x \n", GDMA_READ_REG(RALINK_GDMA_DONEINT));
     spin_unlock_irqrestore(&gdma_int_lock, flags);
 
     return IRQ_HANDLED;
